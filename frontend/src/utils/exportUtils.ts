import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

interface ESGSummary {
  totalResponses: number;
  financialYears: number[];
  latestResponse: any;
  trends: {
    carbonEmissions: { year: number; value: number }[];
    totalRevenue: { year: number; value: number }[];
    totalEmployees: { year: number; value: number }[];
    diversityRatio: { year: number; value: number }[];
  };
}

interface ExportOptions {
  companyName?: string;
  reportDate?: string;
  reportType?: 'summary' | 'detailed' | 'trends';
}

export const exportToPDF = (summary: ESGSummary, options: ExportOptions = {}) => {
  const doc = new jsPDF();
  const { companyName = 'Your Company', reportDate = new Date().toLocaleDateString(), reportType = 'summary' } = options;

  // Title
  doc.setFontSize(24);
  doc.setTextColor(20, 108, 148);
  doc.text('ESG Sustainability Report', 105, 20, { align: 'center' });

  // Company and Date
  doc.setFontSize(12);
  doc.setTextColor(100);
  doc.text(`Company: ${companyName}`, 20, 35);
  doc.text(`Report Date: ${reportDate}`, 20, 42);
  doc.text(`Report Type: ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}`, 20, 49);

  // Summary Statistics
  doc.setFontSize(16);
  doc.setTextColor(20, 108, 148);
  doc.text('Summary Statistics', 20, 65);

  const summaryData = [
    ['Metric', 'Value'],
    ['Total Responses', summary.totalResponses.toString()],
    ['Financial Years Covered', summary.financialYears.length.toString()],
    ['Latest Year', Math.max(...summary.financialYears).toString()],
    ['Earliest Year', Math.min(...summary.financialYears).toString()],
  ];

  autoTable(doc, {
    startY: 75,
    head: [['Metric', 'Value']],
    body: summaryData.slice(1),
    theme: 'grid',
    headStyles: { fillColor: [20, 108, 148] },
    styles: { fontSize: 10 },
    margin: { left: 20, right: 20 },
  });

  // Key Metrics
  if (summary.latestResponse) {
    doc.setFontSize(16);
    doc.setTextColor(20, 108, 148);
    doc.text('Key ESG Metrics', 20, 130);

    const metricsData = [
      ['Metric', 'Value', 'Unit'],
      ['Carbon Intensity', summary.latestResponse.carbonIntensity?.toFixed(6) || 'N/A', 'T CO2e / INR'],
      ['Renewable Energy Ratio', summary.latestResponse.renewableElectricityRatio?.toFixed(1) || 'N/A', '%'],
      ['Diversity Ratio', summary.latestResponse.diversityRatio?.toFixed(1) || 'N/A', '%'],
      ['Community Spend Ratio', summary.latestResponse.communitySpendRatio?.toFixed(1) || 'N/A', '%'],
    ];

    autoTable(doc, {
      startY: 140,
      head: [['Metric', 'Value', 'Unit']],
      body: metricsData.slice(1),
      theme: 'grid',
      headStyles: { fillColor: [20, 108, 148] },
      styles: { fontSize: 9 },
      margin: { left: 20, right: 20 },
    });
  }

  // Trends Data
  if (summary.trends?.carbonEmissions?.length > 0) {
    doc.setFontSize(16);
    doc.setTextColor(20, 108, 148);
    doc.text('Carbon Emissions Trend', 20, 200);

    const trendData = summary.trends.carbonEmissions.map(item => [
      item.year.toString(),
      item.value.toString(),
      'T CO2e'
    ]);

    autoTable(doc, {
      startY: 210,
      head: [['Year', 'Emissions', 'Unit']],
      body: trendData,
      theme: 'grid',
      headStyles: { fillColor: [20, 108, 148] },
      styles: { fontSize: 9 },
      margin: { left: 20, right: 20 },
    });
  }

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text('Generated by Oren ESG Platform', 105, 280, { align: 'center' });

  return doc;
};

export const exportToExcel = (summary: ESGSummary, options: ExportOptions = {}) => {
  const { companyName = 'Your Company', reportDate = new Date().toLocaleDateString(), reportType = 'summary' } = options;

  // Create workbook
  const wb = XLSX.utils.book_new();

  // Summary sheet
  const summaryData = [
    ['ESG Sustainability Report'],
    [''],
    ['Company', companyName],
    ['Report Date', reportDate],
    ['Report Type', reportType.charAt(0).toUpperCase() + reportType.slice(1)],
    [''],
    ['Summary Statistics'],
    ['Metric', 'Value'],
    ['Total Responses', summary.totalResponses],
    ['Financial Years Covered', summary.financialYears.length],
    ['Latest Year', Math.max(...summary.financialYears)],
    ['Earliest Year', Math.min(...summary.financialYears)],
    [''],
  ];

  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
  XLSX.utils.book_append_sheet(wb, summarySheet, 'Summary');

  // Key Metrics sheet
  if (summary.latestResponse) {
    const metricsData = [
      ['Key ESG Metrics'],
      [''],
      ['Metric', 'Value', 'Unit'],
      ['Carbon Intensity', summary.latestResponse.carbonIntensity || 'N/A', 'T CO2e / INR'],
      ['Renewable Energy Ratio', summary.latestResponse.renewableElectricityRatio || 'N/A', '%'],
      ['Diversity Ratio', summary.latestResponse.diversityRatio || 'N/A', '%'],
      ['Community Spend Ratio', summary.latestResponse.communitySpendRatio || 'N/A', '%'],
    ];

    const metricsSheet = XLSX.utils.aoa_to_sheet(metricsData);
    XLSX.utils.book_append_sheet(wb, metricsSheet, 'Key Metrics');
  }

  // Trends sheets
  if (summary.trends?.carbonEmissions?.length > 0) {
    const emissionsData = [
      ['Carbon Emissions Trend'],
      [''],
      ['Year', 'Emissions (T CO2e)'],
      ...summary.trends.carbonEmissions.map(item => [item.year, item.value])
    ];

    const emissionsSheet = XLSX.utils.aoa_to_sheet(emissionsData);
    XLSX.utils.book_append_sheet(wb, emissionsSheet, 'Carbon Emissions');
  }

  if (summary.trends?.totalRevenue?.length > 0) {
    const revenueData = [
      ['Revenue Trend'],
      [''],
      ['Year', 'Revenue'],
      ...summary.trends.totalRevenue.map(item => [item.year, item.value])
    ];

    const revenueSheet = XLSX.utils.aoa_to_sheet(revenueData);
    XLSX.utils.book_append_sheet(wb, revenueSheet, 'Revenue');
  }

  if (summary.trends?.diversityRatio?.length > 0) {
    const diversityData = [
      ['Diversity Ratio Trend'],
      [''],
      ['Year', 'Diversity Ratio (%)'],
      ...summary.trends.diversityRatio.map(item => [item.year, item.value])
    ];

    const diversitySheet = XLSX.utils.aoa_to_sheet(diversityData);
    XLSX.utils.book_append_sheet(wb, diversitySheet, 'Diversity');
  }

  // Financial Years sheet
  if (summary.financialYears?.length > 0) {
    const yearsData = [
      ['Financial Years Covered'],
      [''],
      ['Year'],
      ...summary.financialYears.map(year => [year])
    ];

    const yearsSheet = XLSX.utils.aoa_to_sheet(yearsData);
    XLSX.utils.book_append_sheet(wb, yearsSheet, 'Financial Years');
  }

  return wb;
};

export const downloadPDF = (summary: ESGSummary, options: ExportOptions = {}) => {
  const doc = exportToPDF(summary, options);
  const fileName = `ESG_Report_${options.companyName || 'Company'}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const downloadExcel = (summary: ESGSummary, options: ExportOptions = {}) => {
  const wb = exportToExcel(summary, options);
  const fileName = `ESG_Report_${options.companyName || 'Company'}_${new Date().toISOString().split('T')[0]}.xlsx`;
  
  // Convert to blob and download
  const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  saveAs(blob, fileName);
};

// Function to get company name from user data or localStorage
export const getCompanyName = (): string => {
  if (typeof window !== 'undefined') {
    const userData = localStorage.getItem('userData');
    if (userData) {
      try {
        const user = JSON.parse(userData);
        return user.companyName || user.fullName || 'Your Company';
      } catch {
        return 'Your Company';
      }
    }
  }
  return 'Your Company';
};

// Function to export a template when no data exists
export const exportTemplatePDF = (options: ExportOptions = {}) => {
  const doc = new jsPDF();
  const { companyName = 'Your Company', reportDate = new Date().toLocaleDateString() } = options;

  // Title
  doc.setFontSize(24);
  doc.setTextColor(20, 108, 148);
  doc.text('ESG Sustainability Report Template', 105, 20, { align: 'center' });

  // Company and Date
  doc.setFontSize(12);
  doc.setTextColor(100);
  doc.text(`Company: ${companyName}`, 20, 35);
  doc.text(`Report Date: ${reportDate}`, 20, 42);

  // Instructions
  doc.setFontSize(16);
  doc.setTextColor(20, 108, 148);
  doc.text('Getting Started', 20, 60);

  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text('This template shows the structure of your ESG report. To generate a complete report:', 20, 75);
  
  const instructions = [
    '1. Fill out your ESG questionnaire with actual data',
    '2. Return to this dashboard to view your metrics',
    '3. Use the export functions to download your report',
    '4. Customize the report format as needed'
  ];

  instructions.forEach((instruction, index) => {
    doc.text(instruction, 20, 90 + (index * 8));
  });

  // Template Structure
  doc.setFontSize(16);
  doc.setTextColor(20, 108, 148);
  doc.text('Report Structure', 20, 130);

  const structureData = [
    ['Section', 'Description'],
    ['Summary Statistics', 'Overview of your ESG data coverage'],
    ['Key Metrics', 'Current ESG performance indicators'],
    ['Trends Analysis', 'Historical performance over time'],
    ['Recommendations', 'Action items for improvement']
  ];

  autoTable(doc, {
    startY: 140,
    head: [['Section', 'Description']],
    body: structureData.slice(1),
    theme: 'grid',
    headStyles: { fillColor: [20, 108, 148] },
    styles: { fontSize: 9 },
    margin: { left: 20, right: 20 },
  });

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text('Generated by Oren ESG Platform - Template', 105, 280, { align: 'center' });

  const fileName = `ESG_Template_${companyName}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const exportTemplateExcel = (options: ExportOptions = {}) => {
  const { companyName = 'Your Company', reportDate = new Date().toLocaleDateString() } = options;

  // Create workbook
  const wb = XLSX.utils.book_new();

  // Template Instructions
  const instructionsData = [
    ['ESG Sustainability Report Template'],
    [''],
    ['Company', companyName],
    ['Report Date', reportDate],
    [''],
    ['Getting Started'],
    ['This template shows the structure of your ESG report. To generate a complete report:'],
    ['1. Fill out your ESG questionnaire with actual data'],
    ['2. Return to this dashboard to view your metrics'],
    ['3. Use the export functions to download your report'],
    ['4. Customize the report format as needed'],
    [''],
    ['Report Structure'],
    ['Section', 'Description'],
    ['Summary Statistics', 'Overview of your ESG data coverage'],
    ['Key Metrics', 'Current ESG performance indicators'],
    ['Trends Analysis', 'Historical performance over time'],
    ['Recommendations', 'Action items for improvement']
  ];

  const instructionsSheet = XLSX.utils.aoa_to_sheet(instructionsData);
  XLSX.utils.book_append_sheet(wb, instructionsSheet, 'Template Guide');

  // Sample Data Structure
  const sampleData = [
    ['Sample ESG Metrics'],
    [''],
    ['Metric', 'Value', 'Unit', 'Target'],
    ['Carbon Intensity', '0.000150', 'T CO2e / INR', '< 0.000100'],
    ['Renewable Energy Ratio', '65.2', '%', '> 80%'],
    ['Diversity Ratio', '48.5', '%', '> 50%'],
    ['Community Spend Ratio', '2.1', '%', '> 2%']
  ];

  const sampleSheet = XLSX.utils.aoa_to_sheet(sampleData);
  XLSX.utils.book_append_sheet(wb, sampleSheet, 'Sample Data');

  return wb;
};

export const downloadTemplatePDF = (options: ExportOptions = {}) => {
  exportTemplatePDF(options);
};

export const downloadTemplateExcel = (options: ExportOptions = {}) => {
  const wb = exportTemplateExcel(options);
  const fileName = `ESG_Template_${options.companyName || 'Company'}_${new Date().toISOString().split('T')[0]}.xlsx`;
  
  // Convert to blob and download
  const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  saveAs(blob, fileName);
};
